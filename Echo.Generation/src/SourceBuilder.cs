using System;
using System.Text;

namespace Echo.Generation;

public sealed class SourceBuilder
{
	public SourceBuilder(string name)
	{
		builder = new StringBuilder($"//Generated by {name}");
		builder.AppendLine();
	}

	readonly StringBuilder builder;
	string indentation = string.Empty;

	public void NewSection() => builder.AppendLine();

	public void Using(string identifier)
	{
		if (indentation.Length > 0) throw new InvalidOperationException();
		builder.AppendLine($"using {identifier};");
	}

	public void Namespace(string identifier)
	{
		if (indentation.Length > 0) throw new InvalidOperationException();
		builder.AppendLine($"namespace {identifier};");
	}

	public void Attribute(string identifier, string parameter = default)
	{
		if (parameter == null) builder.AppendLine($"{indentation}[{identifier}]");
		else builder.AppendLine($"{indentation}[{identifier}({parameter})]");
	}

	public void EnterBlock(string signature)
	{
		builder.AppendLine($"{indentation}{signature}");
		builder.AppendLine($"{indentation}{{");
		indentation += '\t';
	}

	public void ExitBlock()
	{
		if (indentation.Length == 0) throw new InvalidOperationException();
		indentation = indentation.Substring(0, indentation.Length - 1);
		builder.AppendLine($"{indentation}}}");
	}

	public ReleaseHandle FetchBlock(string signature)
	{
		EnterBlock(signature);
		return new ReleaseHandle(this);
	}

	public void Prefix(string value) => builder.Append($"{indentation}{value}");
	public void Postfix(string value) => builder.AppendLine($"{value};");
	public void Append(string value) => builder.Append(value);
	public void Line(string value) => builder.AppendLine($"{indentation}{value};");

	public override string ToString() => builder.ToString();

	public readonly struct ReleaseHandle : IDisposable
	{
		public ReleaseHandle(SourceBuilder builder) => this.builder = builder;

		readonly SourceBuilder builder;

		void IDisposable.Dispose() => builder.ExitBlock();
	}
}