using System;
using System.Text;

namespace Echo.Generation;

/// <summary>
/// A wrapper around a <see cref="StringBuilder"/> to make writing source generators easier.
/// </summary>
public sealed class SourceBuilder
{
	public SourceBuilder(string name)
	{
		builder = new StringBuilder($"//Generated by {name}: {DateTime.Now:F}");
		NewLine();
		NewLine();
	}

	readonly StringBuilder builder;
	string indentation = string.Empty;

	/// <summary>
	/// Adds a new attribute as so: [identifier] or [identifier(parameter)].
	/// </summary>
	public void Attribute(string identifier, string parameter = default)
	{
		if (parameter == null) builder.AppendLine($"{indentation}[{identifier}]");
		else builder.AppendLine($"{indentation}[{identifier}({parameter})]");
	}

	/// <summary>
	/// Begins a new block on a new indentation.
	/// </summary>
	/// <param name="signature">The line that immediately precedes this block.</param>
	public void EnterBlock(string signature)
	{
		builder.AppendLine($"{indentation}{signature}");
		builder.AppendLine($"{indentation}{{");
		indentation += '\t';
	}

	/// <summary>
	/// Stops the topmost block and drops an indentation.
	/// </summary>
	public void ExitBlock()
	{
		if (indentation.Length == 0) throw new InvalidOperationException();
		indentation = indentation.Substring(0, indentation.Length - 1);
		builder.AppendLine($"{indentation}}}");
	}

	/// <summary>
	/// Identical to invoking <see cref="EnterBlock"/> and then <see cref="ExitBlock"/>,
	/// but allows you to do so with using statements around a <see cref="ReleaseHandle"/>.
	/// </summary>
	public ReleaseHandle FetchBlock(string signature)
	{
		EnterBlock(signature);
		return new ReleaseHandle(this);
	}

	/// <summary>
	/// Adds a new line with nothing on it.
	/// </summary>
	public void NewLine() => builder.AppendLine();

	/// <summary>
	/// Adds a new indented line containing <paramref name="value"/> and ending nothing.
	/// </summary>
	public void NewLine(string value) => builder.AppendLine($"{indentation}{value}");

	/// <summary>
	/// Adds a new indented line containing <paramref name="value"/> and ending with a semicolon. 
	/// </summary>
	public void NewCode(string value) => builder.AppendLine($"{indentation}{value};");

	/// <summary>
	/// Adds a indentation on the current line.
	/// </summary>
	public void Indent() => builder.Append(indentation);

	/// <summary>
	/// Indents line and only adds <paramref name="value"/> without anything else.
	/// </summary>
	public void Prefix(string value) => builder.Append($"{indentation}{value}");

	/// <summary>
	/// Ends the current line with <paramref name="value"/> and a semicolon.
	/// </summary>
	public void Postfix(string value) => builder.AppendLine($"{value};");

	/// <summary>
	/// Simply append <paramref name="value"/> to the current position.
	/// </summary>
	public void Append(string value) => builder.Append(value);

	/// <summary>
	/// Converts the content of the <see cref="SourceBuilder"/> into a <see cref="string"/>.
	/// </summary>
	public override string ToString() => builder.ToString();

	public readonly struct ReleaseHandle : IDisposable
	{
		public ReleaseHandle(SourceBuilder builder) => this.builder = builder;

		readonly SourceBuilder builder;

		void IDisposable.Dispose() => builder.ExitBlock();
	}
}